from parser.ascii_parser.ascii_table_parser import ascii_table_parser
from parser.ascii_parser.ascii_tree_parser import ascii_tree_parser

from deepdiff import DeepDiff

sub = """
Aufgabe 3
a) PROJECTE (s UNION s) CROSS (r ‚à© (r JOIN r)) und PROJECTE (s) JOIN r
Den linken Ausdruck kann man folgenderma√üen vereinfachen:
1. s UNION s = s (keine Duplikate bei Mengen).
2. r JOIN r = r (jedes Tupel passt mindestens zu sich selbst und es gibt keine zus√§tzlichen Attribute)
3. Aus 2. folgt dann r ‚à© r = r (jedes Tupel in r ist ja auch in r‚Ä¶).
PROJECTE (s UNION s) CROSS (r ‚à© (r JOIN r)) = PROJECTE (s) CROSS r
Da au√üerdem die Relationsschema R und S keine gemeinsamen Attribute haben ({A, B,D} ‚à© {C, E, F} = ‚àÖ), 
sind der nat√ºrliche Join und das kartesische Produkt der Relationen r und s gleich. Es folgt:
PROJECTE (s UNION s) CROSS (r ‚à© (r JOIN r)) = PROJECTE (s) CROSS r = PROJECTE (s) JOIN r
Offensichtlich ist der erste Ausdruck stark redundant und der zweite Ausdruck ist dahingegen wesentlich k√ºrzer. 
Demnach ist der zweite Ausdruck performanter in der Ausf√ºhrung. 
(Das Datenbanksystem w√ºrde den ersten Ausdruck aber dennoch hoffentlich vor der Berechnung vereinfachen 
und optimieren.)

b) PROJECTr.B(SELECT r.B=99 (r CROSS q)) und SELECT B=99(œÄB (r))
Das Ergebnis beider Ausdr√ºcke ist eine Tabelle mit dem Attribut B und einer einzigen Zeile mit dem Wert 99 oder 
keinem Ergebnis, wenn es kein entsprechendes Tupel in r gibt. Das sieht man auch, 
wenn man den ersten Ausdruck in den zweiten folgenderma√üen umformt:
Weil sowohl Projektion und Selektion nur Attribut r.B betreffen, kann man sie beide miteinander vertauschen:
PROJECTr.B(SELECT r.B=99 (r CROSS q)) = SELECT r.B=99(œÄr.B(r CROSS q))
Dann sieht man auch, dass das kartesische Produkt R CROSS Q hinf√§llig ist, wenn man danach auf das Attribut r.B 
projiziert, i.e., œÄr.B(r CROSS q) = œÄr.B(r). Daraus w√ºrde die √Ñquivalenz folgen:
PROJECTr.B(SELECT r.B=99 (r CROSS q)) = SELECT r.B=99(œÄr.B(r CROSS q)) = SELECT r.B=99(œÄr.B(r))
Da der zweite Ausdruck keinen Join erfordert und au√üerdem gleich alle unn√∂tigen Attribute eliminiert, w√ºrden sowohl 
Laufzeit als auch Speicherplatz bei der Berechnung gespart.
W√§re statt des kartesischen Produkts dort ein nat√ºrlicher Join im rechten Ausdruck, dann w√§ren die Ausdr√ºcke nicht 
√§quivalent. Gegenbeispiel:
r = {(a, 99, d)} und q = {(1, c)} ‚Üí PROJECTr.B(SELECT r.B=99 (r JOIN q)) = ‚àÖ und SELECT B=99(œÄB (r)) = {(99)}.

c) r JOIN (SELECT B=3 q) und (SELECT B=3 r) JOIN q
Die beiden Ausdr√ºcke sind √§quivalent, weil es egal ist, ob bei r oder q nach B = 3 selektiert wird. 
Formal kann man das zeigen durch die Umformung
r JOIN (SELECT B=3 q) = SELECT B=3 (r JOIN q) = (SELECT B=3 r) JOIN q
Welcher Ausdruck performanter ist, h√§ngt hier tats√§chlich vom Inhalt der Datenbank ab. 
Wenn bspw. die Relation r sehr viele Tupel im Vergleich zu q hat und die Selektion davon viele aussortieren w√ºrde, 
w√§re der zweite Ausdruck schneller. Im Idealfall gibt es vielleicht einen Index √ºber B und das Datenbanksystem 
kann die Ausdr√ºcke dann als jeweils eine Operation ausf√ºhren, also Selektion und Join gleichzeitig 
mit Hilfe des Index.

Aufgabe 4
a) Sei X = Y und Z ‚äÜ X. Dann gilt œÄZ (r DIFFERENCE s) = œÄZ (r) DIFFERENCE œÄZ (s).
Diese Aussage ist i.A. falsch. Es kann passieren, dass durch die Projektion auf Z mehr Tupel in œÄZ (r) durch Tupel 
in œÄZ (s) eliminiert werden im Vergleich zu r DIFFERENCE s, wobei die anschlie√üende Projektion keine Tupel als 
Duplikate eliminiert. Dann w√§re |œÄZ (r) DIFFERENCE œÄZ (s)| < |œÄZ (r DIFFERENCE s)|
Gegenbeispiel: X = Y = {A, B}, Z = {A}, r = {(1,2)}, s = {(1,3)}
Dann w√§re r DIFFERENCE s = {(1,2)} = r und œÄZ (r DIFFERENCE s) = {(1)}, wohingegen œÄZ (r) DIFFERENCE œÄZ (s) = {(1)} DIFFERENCE {(1)} = ‚àÖ.

b) Sei X ‚à© Y = ‚àÖ. Dann gilt (r JOIN s) DIVIDE s = r.
Da X ‚à© Y = ‚àÖ gilt, ist r JOIN s das kartesische Produkt.
(r JOIN s) DIVIDE s = (r CROSS s) DIVIDE s
Durch Anwendung der Definition der relationalen Division unter Beachtung von X DIVIDE Y = X (weil X ‚à© Y = ‚àÖ) folgt dann
(r CROSS s) DIVIDE s = œÄX(r CROSS s) DIFFERENCE œÄX((œÄX(r CROSS s) CROSS s) DIFFERENCE (r CROSS s))
Weiterhin l√§sst sich œÄX(r CROSS s) zu r vereinfachen, da ohnehin alle Attribute von s wegprojiziert werden:
œÄX(r CROSS s) DIFFERENCE œÄX((œÄX(r CROSS s) CROSS s) DIFFERENCE (r CROSS s)) = r DIFFERENCE œÄX((r CROSS s) DIFFERENCE (r CROSS s))
Ersetzt man nun noch (r CROSS s) DIFFERENCE (r CROSS s) durch ‚àÖ, folgt dass
r DIFFERENCE œÄX((r CROSS s) DIFFERENCE (r CROSS s)) = r DIFFERENCE œÄX(‚àÖ) = r

Aufgabe 5
a) 
Min=0 
Max=m

b) 
Min=0 
Max=n

c) 
Min=max{m,n} 
Max=m+n

d) 
Min=0 
Max=min{m,n}

e) 
Min=0 
Max=m

f) 
Min=0 
Max=mn (falls X‚à©Y‚â†‚àÖ) 
Min=mn 
Max=mn (falls X‚à©Y=‚àÖ)

g) 
Min=0 
Max=mn

h) 
Min=0 
Max=floor(m/n)
"""

ref = """PROJECT station, str, nr
‚îî‚îÄ‚îÄ SELECT linie=1
    ‚îî‚îÄ‚îÄ CROSS
        ‚îú‚îÄ‚îÄ Halt
        ‚îî‚îÄ‚îÄ ùëÜùë°ùëéùë°ùëñùëúùëõ
"""

#dif = DeepDiff(ascii_table_parser(sub), ascii_table_parser(ref), ignore_order=True)
dif = DeepDiff(ascii_tree_parser(sub), ascii_tree_parser(ref), ignore_order=True)

print(dif)
